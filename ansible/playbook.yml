


- name: Configurer les utilisateurs et groupes dans les conteneurs Docker
  hosts: localhost
  vars_prompt:
    - name: number_of_containers
      prompt: "Veuillez entrer le nombre de conteneurs: "
      private: no

  tasks:

    - name: Créer le réseau Docker network_admin si nécessaire
      community.docker.docker_network:
        name: network_admin
        driver: bridge
        ipam_config: 
          - subnet: 172.29.0.0/16
        state: present


    - name: Construire l'image du conteneur attaquant
      community.docker.docker_image:
        name: attacker_container
        build:
          path: "{{ playbook_dir }}/../docker/attacker"
        source: build

    - name: Lister les ports déjà utilisés par Docker
      ansible.builtin.shell: >
        /usr/bin/docker ps --format '{{"{{.Ports}}"}}' | grep -o '[0-9]\{4,\}' | cut -d: -f1
      register: used_ports

    - name: Détecter les ports libres pour SSH
      ansible.builtin.set_fact:
        available_ports: >
          {{
            range(2222, 2321) | difference(used_ports.stdout_lines | map('int') | list)
          }}
 
    - name: Créer des conteneurs attaquants dans network_admin 
      community.docker.docker_container:
        name: "attacker_container_{{ available_ports[item] }}"
        image: attacker_container
        networks:
          - name: network_admin
        published_ports:
          - "{{ available_ports[item] }}:22"
        state: started
      loop: "{{ range(0, number_of_containers | int) | list }}"
      register: container_results

    # 3. Générer un mot de passe sécurisé pour chaque conteneur
      # 3. Générer un mot de passe sécurisé pour chaque conteneur
    - name: Générer un mot de passe sécurisé pour chaque conteneur
      ansible.builtin.shell: "openssl rand -base64 12"
      register: generated_password
      delegate_to: localhost
      loop: "{{ container_results.results }}"
      loop_control:
        loop_var: container

    # 3.1 Associer chaque conteneur avec son mot de passe
    - name: Associer chaque conteneur avec son mot de passe
      ansible.builtin.set_fact:
        container_passwords: >
          {{
            container_results.results | zip(generated_password.results) | map('list') | list
          }}

    # 4. Modifier le mot de passe de client1 dans chaque conteneur
    - name: Modifier le mot de passe de client1 dans les conteneurs
      ansible.builtin.command: >
        docker exec {{ item.0.container.Name }}
        bash -c "echo 'client1:{{ item.1.stdout }}' | chpasswd"
      loop: "{{ container_passwords }}"
      when: container_results is defined

    # 5. Afficher les mots de passe générés pour chaque conteneur
    - name: Afficher les mots de passe générés
      ansible.builtin.debug:
        msg: "Mot de passe généré pour {{ item.0.container.Name }} : {{ item.1.stdout }}"
      loop: "{{ container_passwords }}"
      when: container_passwords is defined

   # 6. Insérer les informations des conteneurs dans la base de données
    - name: Insérer les informations des conteneurs dans la base de données
      community.mysql.mysql_query:
        login_host: "mysql-container"
        login_port: 3306
        login_user: "root"
        login_password: "rootpassword"
        login_db: "containers_db"
        query: | 
          INSERT INTO container (container_id, container_name, ssh_port, image, mdp_tmp)
          VALUES
          {% for container_password in container_passwords %}
            (
              "{{ container_password[0].container.Id }}",
              "{{ container_password[0].container.Name }}",
              {{ available_ports[loop.index0] }},
              "{{ container_password[0].container.Image }}",
              "{{ container_password[1].stdout }}"
            )
            {% if not loop.last %}, {% endif %}
          {% endfor %};
      when: container_passwords is defined

    # Ajouter une tâche cron pour vérifier les contrats expirés
    - name: Ajouter une tâche cron pour vérifier les contrats expirés
      cron:
        name: "Vérification des contrats expirés"
        minute: "*/1"
        job: "/app/ansible/verifier_contrats_expires.sh"
        state: present

    # Afficher un message de confirmation
    - name: Afficher un message de confirmation
      ansible.builtin.debug:
        msg: "Les conteneurs attaquants ont été créés et leurs informations ont été insérées dans la base de données."
