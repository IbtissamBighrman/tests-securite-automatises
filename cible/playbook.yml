- name: Déployer un serveur Node.js dans un conteneur Docker à partir de la base de données
  hosts: localhost
  vars:
    db_name: containers_db
    db_user: your_db_username  # Remplacez par votre nom d'utilisateur MySQL
    db_password: your_db_password  # Remplacez par votre mot de passe MySQL

  tasks:
    - name: Récupérer target_ip et subnet depuis la base de données
      community.mysql.mysql_query:
        login_db: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        query: SELECT target_ip, target_network FROM target WHERE contract_id = 1;  # Remplacez avec le bon ID si nécessaire
      register: target_data

    - name: Vérifier si les données de cible sont récupérées
      debug:
        msg: "Target IP: {{ target_data.results[0].result[0].target_ip }} / Subnet: {{ target_data.results[0].result[0].target_network }}"

    - name: Extraire target_ip et subnet
      set_fact:
        target_ip: "{{ target_data.results[0].result[0].target_ip }}"
        subnet: "{{ target_data.results[0].result[0].target_network }}"

    - name: Créer un réseau Docker avec le sous-réseau spécifié
      community.docker.docker_network:
        name: "network_{{ target_ip }}"
        driver: bridge
        ipam_config:
          - subnet: "{{ subnet }}"

    - name: Construire l'image Docker du conteneur cible
      community.docker.docker_image:
        name: "image_{{ target_ip }}"
        build:
          path: "{{ playbook_dir }}/{{ dockerfile_path }}"  # Assurez-vous d'obtenir ce chemin quelque part ou de définir statiquement
        source: build

    - name: Exécuter le conteneur Docker et le lier au sous-réseau
      community.docker.docker_container:
        name: "container_{{ target_ip }}"
        image: "image_{{ target_ip }}"
        state: started
        ports:
          - "3000:3000"
        networks:
          - name: "network_{{ target_ip }}"





# - name: Déployer un serveur Node.js dans un conteneur Docker
#   hosts: localhost
#   vars_prompt:
#     - name: dockerfile_path
#       prompt: "Veuillez entrer le chemin vers le répertoire contenant le Dockerfile"
#       private: no
#     - name: id_cible
#       prompt: "Veuillez entrer l'ID de la machine cible"
#       private: no
#     - name: subnet
#       prompt: "Veuillez entrer le sous-réseau pour le conteneur (par exemple, 192.168.1.0/24)"
#       private: no

#   vars:
#     image_id_cible: "image_{{ id_cible }}"
#     container_id_cible: "container_{{ id_cible }}"
#     network_name: "network_{{ id_cible }}"

#   tasks:
#     - name: Créer un réseau Docker avec le sous-réseau spécifié
#       community.docker.docker_network:
#         name: "{{ network_name }}"
#         driver: bridge
#         ipam_config:
#           - subnet: "{{ subnet }}"

#     - name: Construire l'image Docker du conteneur cible
#       community.docker.docker_image:
#         name: "{{ image_id_cible }}"
#         build:
#           path: "{{ playbook_dir }}/{{ dockerfile_path }}"
#         source: build

#     - name: Exécuter le conteneur Docker et le lier au sous-réseau
#       community.docker.docker_container:
#         name: "{{ container_id_cible }}"
#         image: "{{ image_id_cible }}"
#         state: started
#         ports:
#           - "3000:3000"
#         networks:
#           - name: "{{ network_name }}"
